version: '3.7'
services:
  nginx:
    image: nginx:1.17
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/build:/var/www/html
    ports:
      - 8000:80
    depends_on:
      - backend
      - frontend

  redis:
    image: redis

  worker:
    build:
      context: backend
      dockerfile: Dockerfile
    command: celery -A app.tasks worker --loglevel=INFO -Q main-queue -c 5
    environment:
      DATABASE_URL: 'postgresql://aurora:AuroraAdminPanel321@postgres:5432/aurora'
    volumes:
      - ./backend:/app
      - $HOME/.ssh/id_rsa:/app/ansible/env/ssh_key

  beat:
    build:
      context: backend
      dockerfile: Dockerfile
    command: celery -A app.tasks beat --loglevel=INFO
    environment:
      DATABASE_URL: 'postgresql://aurora:AuroraAdminPanel321@postgres:5432/aurora'
    volumes:
      - ./backend:/app

  flower:  
    image: mher/flower:0.9.5
    command: flower --broker=redis://redis:6379/0 --port=5555
    ports:  
        - 5555:5555
    depends_on:
      - "redis"

  postgres:
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_USER: aurora
      POSTGRES_PASSWORD: AuroraAdminPanel321
    volumes:
      - db-data:/var/lib/postgresql/data
      
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
      args:
        BACKEND_APP_VERSION: local
    command: python app/main.py
    tty: true
    environment:
      PYTHONPATH: .
      DATABASE_URL: 'postgresql://aurora:AuroraAdminPanel321@postgres:5432/aurora'
      SECREY_KEY: 'd7Wn3VRWMWPqpM5rqsdRAvW$$2Y7&MTwqnEFZrxA!tNDd&p9F#quNp*SsKzd&AWSLap!NkvW7DPsHktcJPA&cw@bZ$$hxpprDdGKk*h53tL47dDH2epM6JaqD6mfju4&bz'
    depends_on:
      - postgres
    volumes:
      - ./backend:/app

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile-dev
    stdin_open: true
    command: bash -c "yarn && yarn start"
    ports:  
        - 3000:3000
    environment:
      - NODE_ENV=development
      - REACT_APP_VERSION=local
    volumes:
      - ./frontend:/app

  adminer:
    image: adminer
    restart: always
    ports:
      - 8070:8080
  
volumes:
  db-data: